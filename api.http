###
# @name createCategory
POST http://localhost:3000/categories
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "Movie"
}

###

@categoryId = {{createCategory.response.body.data.id}}

###
GET http://localhost:3000/categories/
Accept: application/json
Authorization: Bearer {{accessToken}}

###
# @name createCastMember
POST http://localhost:3000/cast-members
Content-Type: application/json

{
  "name": "John Doe",
  "type": 1
}

###

@castMemberId = {{createCastMember.response.body.data.id}}

###
# @name createGenre
POST http://localhost:3000/genres
Content-Type: application/json

{
  "name": "Genre",
  "categories_id": [
    "{{categoryId}}"
  ]
}

###

@genreId = {{createGenre.response.body.data.id}}

###
# @name createVideo
POST http://localhost:3000/videos
Content-Type: application/json

{
  "title": "Title",
  "description": "Description",
  "year_launched": 2020,
  "duration": 90,
  "rating": "L",
  "is_opened": false,
  "categories_id": [
    "{{categoryId}}"
  ],
  "genres_id": [
    "{{genreId}}"
  ],
  "cast_members_id": [
    "{{castMemberId}}"
  ]
}

###

@videoId = {{createVideo.response.body.data.id}}

###
# @name updateVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: application/json

{
  "title": "Title Updated",
  "description": "Description Updated",
  "year_launched": 2020,
  "duration": 90,
  "rating": "L",
  "is_opened": false,
  "categories_id": [
    "{{categoryId}}"
  ],
  "genres_id": [
    "{{genreId}}"
  ],
  "cast_members_id": [
    "{{castMemberId}}"
  ]
}

###
# @name updateVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234--

###
GET http://localhost:3000/videos/{{videoId}}

###
GET http://localhost:3000/rabbitmq

### Configuração do openid connect server (keycloak)
GET http://host.docker.internal:8080/realms/codeflix/.well-known/openid-configuration

### Certificados do openid connect server (keycloak)
GET http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/certs

###
# @name auth
# Estou usando host.docker.internal, porque no momento o dev container com rest client está fazendo requisição de dentro do container, 
# então por isso localhost:8080 não funciona, mas se estiver usando o rest client fora do container, pode usar localhost:8080
POST http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

username=admin@user.com
&password=secret
&grant_type=password
&client_id=codeflix-admin-frontend

###
POST http://localhost:3000/auth
Content-Type: application/json

{
  "email": "admin@user.com",
  "password": "123456"
}

###
# For genreate new accessToken run: `node create-token.js`
@accessToken = eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4tY2F0YWxvZyJdfSwiaWF0IjoxNzIwMDE5NDI4LCJleHAiOjE3MjAxMDU4Mjh9.LIZZfxovQR4n73gynOVi1FdhMD20pPLE4iPux9hSYFKCSST6CuejsWUOwaoCYo_bPZQ0O2yiq9OwPPkcPOT9kas0vQk7qvgQCi9k_jpy67ftybmX8W7xBOGTe9-nBESb390cdY3DtC1rr-sdEZF6u-OlpEb9f2DGzSRecQ9GFCENdA5QqVNixYavKG6hKLdAgizCxv8898E-wB63JCnESI1wRRrb2Rrvgk1wfo_VXcv_2Y2Z6QRx_FLVXlflPKoVtPCheIJIxc1kBupDgmZaaAflGhkNfN3yKkf2lQSBD4PhBbicgnTqzsO2B8i1USgpArEGluh4ztUBH-rOcxbcVQ

###
GET http://localhost:3000/auth
Accept: application/json
# Authorization: Bearer {{auth.response.body.access_token}}
Authorization: Bearer {{accessToken}}